{:rename-macros {}, :renames {}, :use-macros {validate-args-macro re-com.validate}, :excludes #{}, :name swinging-needle-meter.swinging-needle-meter, :imports nil, :requires {string clojure.string, clojure.string clojure.string, re-com.core re-com.core, re-com.box re-com.box, re-com.util re-com.util, re-com.validate re-com.validate, reagent reagent.core, reagent.core reagent.core, swinging-needle-meter.utils swinging-needle-meter.utils}, :uses {html-attr? re-com.validate, h-box re-com.core, p re-com.core, deref-or-value re-com.util, slider re-com.core, checkbox re-com.core, css-style? re-com.validate, box re-com.core, title re-com.core, v-box re-com.core, flex-child-style re-com.box, abs swinging-needle-meter.utils, line re-com.core, label re-com.core, number-or-string? re-com.validate, gap re-com.core}, :defs {swinging-needle-args-desc {:name swinging-needle-meter.swinging-needle-meter/swinging-needle-args-desc, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 40, :column 1, :end-line 40, :end-column 31, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 40, :column 6, :end-line 40, :end-column 31}}, full-scale-deflection {:name swinging-needle-meter.swinging-needle-meter/full-scale-deflection, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 88, :column 1, :end-line 88, :end-column 27, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 88, :column 6, :end-line 88, :end-column 27}}, deflection {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 91, :column 7, :end-line 91, :end-column 17, :arglists (quote ([value min-value max-value])), :doc "Return the linear deflection of a needle given this `value` on the\n  range `min-value`...`max-value`."}, :name swinging-needle-meter.swinging-needle-meter/deflection, :variadic false, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :end-column 17, :method-params ([value min-value max-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value min-value max-value])), :doc "Return the linear deflection of a needle given this `value` on the\n  range `min-value`...`max-value`."}, polar-to-cartesian {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 101, :column 7, :end-line 101, :end-column 25, :arglists (quote ([cx cy radius theta])), :doc "Return, as a map with keys :x. :y, the cartesian coordinates at the point\n   `radius` distance at `theta` (degrees) angle from a point at\n   cartesian coordinates `cx`, `cy`."}, :name swinging-needle-meter.swinging-needle-meter/polar-to-cartesian, :variadic false, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :end-column 25, :method-params ([cx cy radius theta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cx cy radius theta])), :doc "Return, as a map with keys :x. :y, the cartesian coordinates at the point\n   `radius` distance at `theta` (degrees) angle from a point at\n   cartesian coordinates `cx`, `cy`."}, describe-arc {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 112, :column 7, :end-line 112, :end-column 19, :arglists (quote ([cx cy radius start-angle end-angle])), :doc "Return as a string an SVG path definition describing an arc centred\n   at `cx`, cy` starting at `start-angle` and ending at `end-angle` (both\n   angles in degrees)."}, :name swinging-needle-meter.swinging-needle-meter/describe-arc, :variadic false, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :end-column 19, :method-params ([cx cy radius start-angle end-angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 5, :fn-var true, :arglists (quote ([cx cy radius start-angle end-angle])), :doc "Return as a string an SVG path definition describing an arc centred\n   at `cx`, cy` starting at `start-angle` and ending at `end-angle` (both\n   angles in degrees)."}, as-label {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 125, :column 7, :end-line 125, :end-column 15, :arglists (quote ([arg])), :doc "If this arg is a floating point number, format it to a reasonable width; else return it."}, :name swinging-needle-meter.swinging-needle-meter/as-label, :variadic false, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :end-column 15, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "If this arg is a floating point number, format it to a reasonable width; else return it."}, gradation {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 134, :column 7, :end-line 134, :end-column 16, :arglists (quote ([cx cy min-radius max-radius angle label])), :doc "Return as a string an SVG path definition describing a radial stroke from a center\n  at `cx`, cy` starting at `min-radius` and extending to `max-radius`."}, :name swinging-needle-meter.swinging-needle-meter/gradation, :variadic false, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :end-column 16, :method-params ([cx cy min-radius max-radius angle label]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 6, :fn-var true, :arglists (quote ([cx cy min-radius max-radius angle label])), :doc "Return as a string an SVG path definition describing a radial stroke from a center\n  at `cx`, cy` starting at `min-radius` and extending to `max-radius`."}, as-mm {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 155, :column 7, :end-line 155, :end-column 12, :arglists (quote ([arg])), :doc "return the argument, as a string, with 'mm' appended"}, :name swinging-needle-meter.swinging-needle-meter/as-mm, :variadic false, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :end-column 12, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "return the argument, as a string, with 'mm' appended"}, swinging-needle-meter {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :line 161, :column 7, :end-line 161, :end-column 28, :arglists (quote ([& {:keys [model setpoint width height min-value max-value warn-value tolerance class gradations alarm-class cursor-class frame-class hub-class needle-class redzone-class scale-class target-class unit id style attr], :or {height 200, frame-class "snm-frame", redzone-class "snm-redzone", warn-value 80, needle-class "snm-needle", cursor-class "snm-cursor", tolerance 3, width 300, min-value 0, scale-class "snm-scale", target-class "snm-target", max-value 100, hub-class "snm-hub", gradations 5, id "meter", alarm-class "snm-warning"}, :as args}])), :doc "Render an SVG swinging needle meter", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [model setpoint width height min-value max-value warn-value tolerance class gradations alarm-class cursor-class frame-class hub-class needle-class redzone-class scale-class target-class unit id style attr], :or {height 200, frame-class "snm-frame", redzone-class "snm-redzone", warn-value 80, needle-class "snm-needle", cursor-class "snm-cursor", tolerance 3, width 300, min-value 0, scale-class "snm-scale", target-class "snm-target", max-value 100, hub-class "snm-hub", gradations 5, id "meter", alarm-class "snm-warning"}, :as args})], :arglists ([& {:keys [model setpoint width height min-value max-value warn-value tolerance class gradations alarm-class cursor-class frame-class hub-class needle-class redzone-class scale-class target-class unit id style attr], :or {height 200, frame-class "snm-frame", redzone-class "snm-redzone", warn-value 80, needle-class "snm-needle", cursor-class "snm-cursor", tolerance 3, width 300, min-value 0, scale-class "snm-scale", target-class "snm-target", max-value 100, hub-class "snm-hub", gradations 5, id "meter", alarm-class "snm-warning"}, :as args}]), :arglists-meta (nil)}}, :name swinging-needle-meter.swinging-needle-meter/swinging-needle-meter, :variadic true, :file "src/cljs/swinging_needle_meter/swinging_needle_meter.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [model setpoint width height min-value max-value warn-value tolerance class gradations alarm-class cursor-class frame-class hub-class needle-class redzone-class scale-class target-class unit id style attr], :or {height 200, frame-class "snm-frame", redzone-class "snm-redzone", warn-value 80, needle-class "snm-needle", cursor-class "snm-cursor", tolerance 3, width 300, min-value 0, scale-class "snm-scale", target-class "snm-target", max-value 100, hub-class "snm-hub", gradations 5, id "meter", alarm-class "snm-warning"}, :as args})], :arglists ([& {:keys [model setpoint width height min-value max-value warn-value tolerance class gradations alarm-class cursor-class frame-class hub-class needle-class redzone-class scale-class target-class unit id style attr], :or {height 200, frame-class "snm-frame", redzone-class "snm-redzone", warn-value 80, needle-class "snm-needle", cursor-class "snm-cursor", tolerance 3, width 300, min-value 0, scale-class "snm-scale", target-class "snm-target", max-value 100, hub-class "snm-hub", gradations 5, id "meter", alarm-class "snm-warning"}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [model setpoint width height min-value max-value warn-value tolerance class gradations alarm-class cursor-class frame-class hub-class needle-class redzone-class scale-class target-class unit id style attr], :or {height 200, frame-class "snm-frame", redzone-class "snm-redzone", warn-value 80, needle-class "snm-needle", cursor-class "snm-cursor", tolerance 3, width 300, min-value 0, scale-class "snm-scale", target-class "snm-target", max-value 100, hub-class "snm-hub", gradations 5, id "meter", alarm-class "snm-warning"}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [model setpoint width height min-value max-value warn-value tolerance class gradations alarm-class cursor-class frame-class hub-class needle-class redzone-class scale-class target-class unit id style attr], :or {height 200, frame-class "snm-frame", redzone-class "snm-redzone", warn-value 80, needle-class "snm-needle", cursor-class "snm-cursor", tolerance 3, width 300, min-value 0, scale-class "snm-scale", target-class "snm-target", max-value 100, hub-class "snm-hub", gradations 5, id "meter", alarm-class "snm-warning"}, :as args}]), :doc "Render an SVG swinging needle meter"}}, :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :description :text-anchor :frame-class :path :redzone-class :warn-value :xmlSpace :align :r :transform :needle-class :unit :default :overflow :name :cursor-class :tolerance :circle :width :start :type :min-value :scale-class :style :target-class :div :max-value :hub-class :g :gradations :tspan :cx :id :class :cy :svg :code :setpoint :alarm-class :d :validate-fn :br :x :child :version :viewBox :reduired :rect :visibility :required :height :text :span :model :attr}, :order [:name :required :type :validate-fn :description :model :setpoint :default :width :height :min-value :max-value :warn-value :tolerance :class :alarm-class :cursor-class :frame-class :hub-class :needle-class :scale-class :redzone-class :target-class :unit :id :reduired :gradations :style :attr :span :code :br :x :y :g :transform :path :d :text :text-anchor :align :start :child :div :svg :xmlSpace :overflow :version :viewBox :tspan :visibility :rect :circle :r :cx :cy]}, :doc nil}