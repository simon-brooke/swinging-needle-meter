{:rename-macros {}, :renames {}, :use-macros {superset? clojure.set}, :excludes #{}, :name re-com.util, :imports nil, :requires {clojure.set clojure.set, reagent.ratom reagent.ratom, goog.date.DateTime goog.date.DateTime, goog.date.UtcDateTime goog.date.UtcDateTime}, :uses {RAtom reagent.ratom, superset? clojure.set, Reaction reagent.ratom, RCursor reagent.ratom, Track reagent.ratom, Wrapper reagent.ratom}, :defs {sum-scroll-offsets {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 139, :column 7, :end-line 139, :end-column 25, :arglists (quote ([node])), :doc "Given a DOM node, I traverse through all ascendant nodes (until I reach body), summing any scrollLeft and scrollTop values\n   and return these sums in a map"}, :name re-com.util/sum-scroll-offsets, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 25, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Given a DOM node, I traverse through all ascendant nodes (until I reach body), summing any scrollLeft and scrollTop values\n   and return these sums in a map"}, position-for-id {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 105, :column 7, :end-line 105, :end-column 22, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v'. Returns the position of the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :arglists-meta (nil)}}, :name re-com.util/position-for-id, :variadic true, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :arglists-meta (nil)}, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :doc "Takes a vector of maps 'v'. Returns the position of the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found"}, enumerate {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 132, :column 7, :end-line 132, :end-column 16, :arglists (quote ([coll])), :doc "(for [[index item first? last?] (enumerate coll)] ...)  "}, :name re-com.util/enumerate, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "(for [[index item first? last?] (enumerate coll)] ...)  "}, remove-id-item {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 121, :column 7, :end-line 121, :end-column 21, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v', each of which has an id-fn (default :id) key.\n  Return v where item matching 'id' is excluded", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :arglists-meta (nil)}}, :name re-com.util/remove-id-item, :variadic true, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :arglists-meta (nil)}, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :doc "Takes a vector of maps 'v', each of which has an id-fn (default :id) key.\n  Return v where item matching 'id' is excluded"}, remove-nth {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 88, :column 7, :end-line 88, :end-column 17, :arglists (quote ([v n])), :doc "Removes the item at position n from a vector v, returning a shrunk vector"}, :name re-com.util/remove-nth, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 17, :method-params ([v n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v n])), :doc "Removes the item at position n from a vector v, returning a shrunk vector"}, deref-or-value {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([val-or-atom])), :doc "Takes a value or an atom\n  If it's a value, returns it\n  If it's a Reagent object that supports IDeref, returns the value inside it by derefing\n  "}, :name re-com.util/deref-or-value, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 21, :method-params ([val-or-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val-or-atom])), :doc "Takes a value or an atom\n  If it's a value, returns it\n  If it's a Reagent object that supports IDeref, returns the value inside it by derefing\n  "}, insert-nth {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 96, :column 7, :end-line 96, :end-column 17, :arglists (quote ([vect index item]))}, :name re-com.util/insert-nth, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 17, :method-params ([vect index item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vect index item]))}, now->utc {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 157, :column 7, :end-line 157, :end-column 15, :arglists (quote ([])), :doc "Answer a goog.date.UtcDateTime based on local date/time."}, :name re-com.util/now->utc, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Answer a goog.date.UtcDateTime based on local date/time."}, deep-merge {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([& vals])), :doc "Recursively merges maps. If vals are not maps, the last value wins.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vals)], :arglists ([& vals]), :arglists-meta (nil)}}, :name re-com.util/deep-merge, :variadic true, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vals)], :arglists ([& vals]), :arglists-meta (nil)}, :method-params [(vals)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists ([& vals]), :doc "Recursively merges maps. If vals are not maps, the last value wins."}, deref-or-value-peek {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 33, :column 7, :end-line 33, :end-column 26, :arglists (quote ([val-or-atom])), :doc "Takes a value or an atom\n  If it's a value, returns it\n  If it's a Reagent object that supports IDeref, returns the value inside it, but WITHOUT derefing\n\n  The arg validation code uses this, since calling deref-or-value adds this arg to the watched ratom list for the component\n  in question, which in turn can cause different rendering behaviour between dev (where we validate) and prod (where we don't).\n\n  This was experienced in popover-content-wrapper with the position-injected atom which was not derefed there, however\n  the dev-only validation caused it to be derefed, modifying its render behaviour and causing mayhem and madness for the developer.\n\n  See below that different Reagent types have different ways of retrieving the value without causing capture, although in the case of\n  Track, we just deref it as there is no peek or state, so hopefully this won't cause issues (surely this is used very rarely).\n  "}, :name re-com.util/deref-or-value-peek, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 26, :method-params ([val-or-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val-or-atom])), :doc "Takes a value or an atom\n  If it's a value, returns it\n  If it's a Reagent object that supports IDeref, returns the value inside it, but WITHOUT derefing\n\n  The arg validation code uses this, since calling deref-or-value adds this arg to the watched ratom list for the component\n  in question, which in turn can cause different rendering behaviour between dev (where we validate) and prod (where we don't).\n\n  This was experienced in popover-content-wrapper with the position-injected atom which was not derefed there, however\n  the dev-only validation caused it to be derefed, modifying its render behaviour and causing mayhem and madness for the developer.\n\n  See below that different Reagent types have different ways of retrieving the value without causing capture, although in the case of\n  Track, we just deref it as there is no peek or state, so hopefully this won't cause issues (surely this is used very rarely).\n  "}, pad-zero {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 64, :column 7, :end-line 64, :end-column 15, :arglists (quote ([s len])), :doc "Left pad a string 's' with '0', until 's' has length 'len'. Return 's' unchanged, if it is already len or greater"}, :name re-com.util/pad-zero, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 15, :method-params ([s len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s len])), :doc "Left pad a string 's' with '0', until 's' has length 'len'. Return 's' unchanged, if it is already len or greater"}, get-element-by-id {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 59, :column 7, :end-line 59, :end-column 24, :arglists (quote ([id]))}, :name re-com.util/get-element-by-id, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 24, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, px {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 78, :column 7, :end-line 78, :end-column 9, :arglists (quote ([val & negative])), :doc "takes a number (and optional :negative keyword to indicate a negative value) and returns that number as a string with 'px' at the end", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(val negative)], :arglists ([val & negative]), :arglists-meta (nil)}}, :name re-com.util/px, :variadic true, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(val negative)], :arglists ([val & negative]), :arglists-meta (nil)}, :method-params [(val negative)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists ([val & negative]), :doc "takes a number (and optional :negative keyword to indicate a negative value) and returns that number as a string with 'px' at the end"}, item-for-id {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 114, :column 7, :end-line 114, :end-column 18, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v'. Returns the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :arglists-meta (nil)}}, :name re-com.util/item-for-id, :variadic true, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :arglists-meta (nil)}, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists ([id v & {:keys [id-fn], :or {id-fn :id}}]), :doc "Takes a vector of maps 'v'. Returns the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found"}, fmap {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 8, :column 7, :end-line 8, :end-column 11, :arglists (quote ([f m])), :doc "Takes a function 'f' amd a map 'm'.  Applies 'f' to each value in 'm' and returns.\n   (fmap  inc  {:a 4  :b 2})   =>   {:a 5  :b 3}"}, :name re-com.util/fmap, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 11, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m])), :doc "Takes a function 'f' amd a map 'm'.  Applies 'f' to each value in 'm' and returns.\n   (fmap  inc  {:a 4  :b 2})   =>   {:a 5  :b 3}"}, pad-zero-number {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/util.cljs", :line 72, :column 7, :end-line 72, :end-column 22, :arglists (quote ([num len])), :doc "return 'num' as a string of 'len' characters, left padding with '0' as necessary"}, :name re-com.util/pad-zero-number, :variadic false, :file "docs/js/compiled/out/re_com/util.cljs", :end-column 22, :method-params ([num len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num len])), :doc "return 'num' as a string of 'len' characters, left padding with '0' as necessary"}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:else :top :id-fn :id :left}, :order [:else :id-fn :id :left :top]}, :doc nil}