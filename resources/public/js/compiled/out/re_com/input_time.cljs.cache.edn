{:rename-macros {}, :renames {}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :excludes #{}, :name re-com.input-time, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, re-com.validate re-com.validate, re-com.text re-com.text, re-com.box re-com.box, re-com.util re-com.util}, :uses {html-attr? re-com.validate, h-box re-com.box, deref-or-value re-com.util, css-style? re-com.validate, label re-com.text, number-or-string? re-com.validate, pad-zero-number re-com.util, gap re-com.box}, :defs {text->time {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 50, :column 8, :end-line 50, :end-column 18, :private true, :arglists (quote ([text])), :doc "return as a time int, the contents of 'text'"}, :private true, :name re-com.input-time/text->time, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 18, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "return as a time int, the contents of 'text'"}, on-defocus {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 116, :column 8, :end-line 116, :end-column 18, :private true, :arglists (quote ([text-model min max callback previous-val])), :doc "Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"}, :private true, :name re-com.input-time/on-defocus, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 18, :method-params ([text-model min max callback previous-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 5, :fn-var true, :arglists (quote ([text-model min max callback previous-val])), :doc "Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"}, valid-time? {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 74, :column 8, :end-line 74, :end-column 19, :private true, :arglists (quote ([time]))}, :private true, :name re-com.input-time/valid-time?, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 19, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time]))}, input-time-args-desc {:name re-com.input-time/input-time-args-desc, :file "docs/js/compiled/out/re_com/input_time.cljs", :line 127, :column 1, :end-line 127, :end-column 26, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 127, :column 6, :end-line 127, :end-column 26}}, time->hrs {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 15, :column 8, :end-line 15, :end-column 17, :private true, :arglists (quote ([time]))}, :private true, :name re-com.input-time/time->hrs, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 17, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time]))}, time->mins {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 10, :column 8, :end-line 10, :end-column 18, :private true, :arglists (quote ([time]))}, :private true, :name re-com.input-time/time->mins, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 18, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time]))}, triple->time {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 25, :column 8, :end-line 25, :end-column 20, :private true, :arglists (quote ([[hr _ mi]])), :doc "Return a time integer from a triple int vector of form  [H  _  M]"}, :private true, :name re-com.input-time/triple->time, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 20, :method-params ([p__32411]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[hr _ mi]])), :doc "Return a time integer from a triple int vector of form  [H  _  M]"}, valid-text? {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 66, :column 8, :end-line 66, :end-column 19, :private true, :arglists (quote ([text])), :doc "Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"}, :private true, :name re-com.input-time/valid-text?, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 19, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"}, time->text {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 59, :column 8, :end-line 59, :end-column 18, :private true, :arglists (quote ([time])), :doc "return a string of format HH:MM for 'time'"}, :private true, :name re-com.input-time/time->text, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 18, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time])), :doc "return a string of format HH:MM for 'time'"}, triple-seeking-re {:name re-com.input-time/triple-seeking-re, :file "docs/js/compiled/out/re_com/input_time.cljs", :line 39, :column 1, :end-line 40, :end-column 20, :private true, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 40, :column 3, :end-line 40, :end-column 20, :private true}}, on-new-keypress {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 101, :column 8, :end-line 101, :end-column 23, :private true, :arglists (quote ([event text-model])), :doc "Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"}, :private true, :name re-com.input-time/on-new-keypress, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 23, :method-params ([event text-model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event text-model])), :doc "Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"}, to-int {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 19, :column 8, :end-line 19, :end-column 14, :private true, :arglists (quote ([s])), :doc "Parse the string 's' to a valid int. On parse failure, return 0"}, :private true, :name re-com.input-time/to-int, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse the string 's' to a valid int. On parse failure, return 0"}, extract-triple-from-text {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 42, :column 8, :end-line 42, :end-column 32, :private true, :arglists (quote ([text]))}, :private true, :name re-com.input-time/extract-triple-from-text, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 32, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, validate-arg-times {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 82, :column 8, :end-line 82, :end-column 26, :private true, :arglists (quote ([model minimum maximum]))}, :private true, :name re-com.input-time/validate-arg-times, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 26, :method-params ([model minimum maximum]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 3, :fn-var true, :arglists (quote ([model minimum maximum]))}, force-valid-time {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 90, :column 8, :end-line 90, :end-column 24, :private true, :arglists (quote ([time min max previous])), :doc "Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"}, :private true, :name re-com.input-time/force-valid-time, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 24, :method-params ([time min max previous]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 4, :fn-var true, :arglists (quote ([time min max previous])), :doc "Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"}, input-time {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 141, :column 7, :end-line 141, :end-column 17, :arglists (quote ([& {:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}}])), :doc "I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}})], :arglists ([& {:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}}]), :arglists-meta (nil)}}, :name re-com.input-time/input-time, :variadic true, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}})], :arglists ([& {:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}}]), :arglists-meta (nil)}, :method-params [({:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}}]), :doc "I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"}, lose-focus-if-enter {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/input_time.cljs", :line 109, :column 8, :end-line 109, :end-column 27, :private true, :arglists (quote ([ev])), :doc "When Enter is pressed, force the component to lose focus"}, :private true, :name re-com.input-time/lose-focus-if-enter, :variadic false, :file "docs/js/compiled/out/re_com/input_time.cljs", :end-column 27, :method-params ([ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ev])), :doc "When Enter is pressed, force the component to lose focus"}}, :require-macros {re-com.core re-com.core, reagent reagent.core, reagent.core reagent.core, re-com.validate re-com.validate}, :cljs.analyzer/constants {:seen #{:description :children :div.time-icon :disabled :else :i.zmdi.zmdi-hc-fw-rc.zmdi-time :default :name :value :maximum :hide-border? :width :on-blur :type :style :on-key-up :class :minimum :show-icon? :code :position :validate-fn :br :input :on-change :border :disabled? :required :height :span :margin :model :attr}, :order [:else :name :required :type :validate-fn :description :model :on-change :default :minimum :maximum :disabled? :show-icon? :hide-border? :width :height :class :style :attr :span :code :br :border :children :input :value :disabled :on-blur :on-key-up :div.time-icon :i.zmdi.zmdi-hc-fw-rc.zmdi-time :position :margin]}, :doc nil}