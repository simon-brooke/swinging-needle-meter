{:rename-macros {}, :renames {}, :use-macros {validate-args-macro re-com.validate}, :excludes #{}, :name re-com.box, :imports nil, :requires {string clojure.string, clojure.string clojure.string, re-com.validate re-com.validate}, :uses {html-attr? re-com.validate, scroll-style? re-com.validate, align-style? re-com.validate, justify-style? re-com.validate, scroll-options-list re-com.validate, css-style? re-com.validate, justify-options-list re-com.validate, string-or-hiccup? re-com.validate, align-options-list re-com.validate}, :defs {align-style {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 82, :column 7, :end-line 82, :end-column 18, :arglists (quote ([attribute align])), :doc "Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"}, :name re-com.box/align-style, :variadic false, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 18, :method-params ([attribute align]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attribute align])), :doc "Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"}, h-box {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 233, :column 7, :end-line 233, :end-column 12, :arglists (quote ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}])), :doc "Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :arglists-meta (nil)}}, :name re-com.box/h-box, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :doc "Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"}, border {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 473, :column 7, :end-line 473, :end-column 13, :arglists (quote ([& {:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr], :or {size "none"}, :as args}])), :doc "Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr], :or {size "none"}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr], :or {size "none"}, :as args}]), :arglists-meta (nil)}}, :name re-com.box/border, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr], :or {size "none"}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr], :or {size "none"}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr], :or {size "none"}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr], :or {size "none"}, :as args}]), :doc "Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)"}, flex-flow-style {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 60, :column 7, :end-line 60, :end-column 22, :arglists (quote ([flex-flow])), :doc "A cross-browser helper function to output flex-flow with all it's potential browser prefixes"}, :name re-com.box/flex-flow-style, :variadic false, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 22, :method-params ([flex-flow]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flex-flow])), :doc "A cross-browser helper function to output flex-flow with all it's potential browser prefixes"}, h-box-args-desc {:name re-com.box/h-box-args-desc, :file "docs/js/compiled/out/re_com/box.cljs", :line 214, :column 1, :end-line 214, :end-column 21, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 214, :column 6, :end-line 214, :end-column 21}}, scroller {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 407, :column 7, :end-line 407, :end-column 15, :arglists (quote ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "auto"}, :as args}])), :doc "Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "auto"}, :as args})], :arglists ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "auto"}, :as args}]), :arglists-meta (nil)}}, :name re-com.box/scroller, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "auto"}, :as args})], :arglists ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "auto"}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "auto"}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 407, :end-line 407, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "auto"}, :as args}]), :doc "Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value"}, box {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 352, :column 7, :end-line 352, :end-column 10, :arglists (quote ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "none"}, :as args}])), :doc "Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "none"}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "none"}, :as args}]), :arglists-meta (nil)}}, :name re-com.box/box, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "none"}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "none"}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "none"}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr], :or {size "none"}, :as args}]), :doc "Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box"}, box-args-desc {:name re-com.box/box-args-desc, :file "docs/js/compiled/out/re_com/box.cljs", :line 334, :column 1, :end-line 334, :end-column 19, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 334, :column 6, :end-line 334, :end-column 19}}, debug {:name re-com.box/debug, :file "docs/js/compiled/out/re_com/box.cljs", :line 6, :column 1, :end-line 6, :end-column 11, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 6, :column 6, :end-line 6, :end-column 11}}, justify-style {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 66, :column 7, :end-line 66, :end-column 20, :arglists (quote ([justify])), :doc "Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"}, :name re-com.box/justify-style, :variadic false, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 20, :method-params ([justify]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([justify])), :doc "Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"}, gap-args-desc {:name re-com.box/gap-args-desc, :file "docs/js/compiled/out/re_com/box.cljs", :line 157, :column 1, :end-line 157, :end-column 19, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 157, :column 6, :end-line 157, :end-column 19}}, v-box {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 293, :column 7, :end-line 293, :end-column 12, :arglists (quote ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}])), :doc "Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :arglists-meta (nil)}}, :name re-com.box/v-box, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :doc "Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent"}, flex-child-style {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 13, :column 7, :end-line 13, :end-column 23, :arglists (quote ([size])), :doc "Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"}, :name re-com.box/flex-child-style, :variadic false, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 23, :method-params ([size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([size])), :doc "Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"}, line-args-desc {:name re-com.box/line-args-desc, :file "docs/js/compiled/out/re_com/box.cljs", :line 186, :column 1, :end-line 186, :end-column 20, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 186, :column 6, :end-line 186, :end-column 20}}, scroller-args-desc {:name re-com.box/scroller-args-desc, :file "docs/js/compiled/out/re_com/box.cljs", :line 382, :column 1, :end-line 382, :end-column 24, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 382, :column 6, :end-line 382, :end-column 24}}, line {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 193, :column 7, :end-line 193, :end-column 11, :arglists (quote ([& {:keys [size color class style attr], :or {size "1px", color "lightgray"}, :as args}])), :doc "Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size color class style attr], :or {size "1px", color "lightgray"}, :as args})], :arglists ([& {:keys [size color class style attr], :or {size "1px", color "lightgray"}, :as args}]), :arglists-meta (nil)}}, :name re-com.box/line, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size color class style attr], :or {size "1px", color "lightgray"}, :as args})], :arglists ([& {:keys [size color class style attr], :or {size "1px", color "lightgray"}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size color class style attr], :or {size "1px", color "lightgray"}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size color class style attr], :or {size "1px", color "lightgray"}, :as args}]), :doc "Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line"}, scroll-style {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 99, :column 7, :end-line 99, :end-column 19, :arglists (quote ([attribute scroll])), :doc "Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"}, :name re-com.box/scroll-style, :variadic false, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 19, :method-params ([attribute scroll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attribute scroll])), :doc "Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"}, gap {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 165, :column 7, :end-line 165, :end-column 10, :arglists (quote ([& {:keys [size width height class style attr], :as args}])), :doc "Returns a component which produces a gap between children in a v-box/h-box along the main axis", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height class style attr], :as args})], :arglists ([& {:keys [size width height class style attr], :as args}]), :arglists-meta (nil)}}, :name re-com.box/gap, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height class style attr], :as args})], :arglists ([& {:keys [size width height class style attr], :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size width height class style attr], :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size width height class style attr], :as args}]), :doc "Returns a component which produces a gap between children in a v-box/h-box along the main axis"}, border-args-desc {:name re-com.box/border-args-desc, :file "docs/js/compiled/out/re_com/box.cljs", :line 452, :column 1, :end-line 452, :end-column 22, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 452, :column 6, :end-line 452, :end-column 22}}, v-box-args-desc {:name re-com.box/v-box-args-desc, :file "docs/js/compiled/out/re_com/box.cljs", :line 274, :column 1, :end-line 274, :end-column 21, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 274, :column 6, :end-line 274, :end-column 21}}, box-base {:protocol-inline nil, :meta {:file "/Users/simon/workspace/swinging-needle-meter/docs/js/compiled/out/re_com/box.cljs", :line 115, :column 8, :end-line 115, :end-column 16, :private true, :arglists (quote ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]}])), :doc "This should generally NOT be used as it is the basis for the box, scroller and border components", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]})], :arglists ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]}]), :arglists-meta (nil)}}, :private true, :name re-com.box/box-base, :variadic true, :file "docs/js/compiled/out/re_com/box.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]})], :arglists ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]}]), :arglists-meta (nil)}, :method-params [({:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]}]), :doc "This should generally NOT be used as it is the basis for the box, scroller and border components"}}, :require-macros {re-com.validate re-com.validate}, :cljs.analyzer/constants {:seen #{:description :min-width :children :align-items :align :bk-color :max-height :border-right :color :min-height :r-border :justify :default :overflow :name :-webkit-flex-flow :background-color :h-scroll :-webkit-flex :-webkit-justify-content :width :start :type :flex :b-border :max-width :radius :border-left :size :style :div :span.bold :scroll :l-border :class :padding :justify-content :gap :t-border :code :overflow-x :validate-fn :br :class-name :child :align-self :border :border-top :overflow-y :border-radius :stretch :v-scroll :auto :required :height :border-bottom :span :flex-flow :margin :attr}, :order [:-webkit-flex :flex :-webkit-flex-flow :flex-flow :-webkit-justify-content :justify-content :child :align-self :border :v-scroll :height :margin :attr :min-width :align :bk-color :max-height :min-height :r-border :justify :h-scroll :width :b-border :max-width :radius :size :style :scroll :class :l-border :padding :t-border :class-name :overflow :overflow-x :overflow-y :align-items :border-left :border-right :border-top :border-bottom :border-radius :background-color :div :name :required :type :validate-fn :description :span :code :br :default :color :children :span.bold :start :stretch :gap :auto]}, :doc nil}